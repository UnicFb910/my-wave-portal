{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","useState","currentAccount","setCurrentAccount","contractAddress","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","waveTxn","hash","wait","getAddressWaves","totalWaves","useEffect","className","role","aria-label","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7da51f12.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport abi from \"./utils/WavePortal.json\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const contractAddress = \"0x2DC7b700B1BcB91843104345770B11294fa5e098\";\r\n  const contractABI = abi.abi;\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Implement your connectWallet method here\r\n  */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const wave = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n        /*\r\n        * Execute the actual wave from your smart contract\r\n        */\r\n        const waveTxn = await wavePortalContract.wave();\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  const getAddressWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        let count = await wavePortalContract.getAddressWaves();\r\n        console.log(\"Retrieved your wave count...\", count.toNumber());\r\n\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  const totalWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n          <span role=\"img\" aria-label=\"emoji\">ðŸ‘‹</span> Hey there!\r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n          I am Unic and I'm learning develop a web3 app so that's pretty cool right? Connect your Ethereum wallet and wave at me!\r\n        </div>\r\n\r\n        {currentAccount && (\r\n          <div className=\"dataContainer\">\r\n            <button className=\"waveButton\" onClick={wave}>\r\n              Wave at Me\r\n            </button>\r\n            <button className=\"waveButton\" onClick={getAddressWaves}>\r\n              How many waves by me?\r\n            </button>\r\n            <button className=\"waveButton\" onClick={totalWaves}>\r\n              Total waves?\r\n            </button>\r\n          </div>\r\n        )}\r\n        {/*\r\n        * If there is no currentAccount render this button\r\n        */}\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}